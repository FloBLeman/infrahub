import { Button, ButtonProps } from "@/components/buttons/button-primitive";
import useFilters, { Filter } from "@/hooks/useFilters";
import { classNames } from "@/utils/common";
import { Icon } from "@iconify-icon/react";
import { useEffect, useRef } from "react";

export const HIDE_AUTO_GENERATED_FILTER: Filter = { name: "group_type__value", value: "default" };

export const GroupsAutoGeneratedFilterButton = ({ className, ...props }: ButtonProps) => {
  const [filters, setFilters] = useFilters();
  const isInitialMount = useRef(true);

  const hasAutoGeneratedFiltered = filters.some(
    (filter) =>
      filter.name === HIDE_AUTO_GENERATED_FILTER.name &&
      filter.value === HIDE_AUTO_GENERATED_FILTER.value
  );

  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
      if (filters.length === 0) {
        setFilters([HIDE_AUTO_GENERATED_FILTER]);
      }
    }
  }, [filters, setFilters]);

  const handleClick = () => {
    if (hasAutoGeneratedFiltered) {
      setFilters(filters.filter((filter) => filter.name !== HIDE_AUTO_GENERATED_FILTER.name));
    } else {
      setFilters([...filters, HIDE_AUTO_GENERATED_FILTER]);
    }
  };

  return (
    <Button
      onClick={handleClick}
      className={classNames("text-custom-blue-700 shrink-0", className)}
      variant="ghost"
      size="sm"
      {...props}
    >
      auto-generated
      <Icon className="ml-1" icon={hasAutoGeneratedFiltered ? "mdi:eye-off" : "mdi:eye"} />
    </Button>
  );
};
